**basic requirements **
1. look around
2. walking to different locations
3. picking up objetcs
4. performing actions on picked objects

(defparameter *nodes* 
'((living-room( you are in the living rooom , a wizard is snoring loudly on th ecouch ))
  (garden (you are in a beautiful garden, there is a well in front of you))
  (attic(you are in the attic , there is a gaint welding torch in the corner))))
  
*describing the location*
(defun describe-location (location nodes)
  (cadr (assoc location )))
  
*describing the path*

(defparameter *edges*
'((living-room(garden west door) (attic upstairs ladder))
  (garden (living-room east door ))
  (attic (living-room downstairs ladder ))))
  
(defun describe-path(edge)
  `(there is a ,(caddr ede) going, (cadr edge) from here))
  
*describing multiple paths at once

(defun describe-paths (location edges)
(apply #'append(mapcar #'describe-path(cdr(assoc location edges)))))

*describe objects at specific locations*
(defparamaeter *objects* '(whiskey bucket frog chain ))

(defparameter *object-locations* '((whiskey living-room) (bucket living-room) (chain garden) (frog garden)))

(defun objects-at (loc objs objs-locs)
  (labels(( at-loc-p(obj)
                  (eq(cadr(assoc obj obj-locs)) loc)))
  (remove-if-not #' at-loc-p objs)))
  
*describing visible objects*

(defun describe-objects (loc objs obj-loc)
  (labels((describe-obj (obj)
                       '(you see a ,obj on the floor. )))
  (apply #'append (mapcar #' describe-obj(objects-at loc objs obj-loc)))))
  
*describing it all*

(defparameter *location* living-room)

(defun look()
  (append (describe-location *location* *nodes*)
          (describe-paths *location* *edges*)
          (describe-objects *location* *objects* *object-locations*)))
          
*walking around in the world*

(defun walk (direction)
  (let ((next(find direction (cdr(assoc *location*. *edges*)) : key #'cadr)))
  (if next 
      (progn (setf *location* (car next)) (look))
      '(you cannot go that way))))
      
      
*picking up objects*

(defun pickup (object)
  (cond((member object
        (objects-at *location* *objects* *objetc-locations*))
        (push (list object 'body) *object -locations*)
        `(you are now carrying the ,object))
        (t '(you cannot get that. ))))
        
*checking out our inventory*

(defun inventory()
  (cons 'items- (objects-at 'body *objects* *object-locations*)))

